<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:component-scan base-package="com.kxy.demo.service"></context:component-scan>
	
	<!-- 加载数据库连接的资源文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 配置数据源   dbcp数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
	    <property name="driverClassName" value="${jdbc.driver}"/>
	    <property name="url" value="${jdbc.url}"/>
	    <property name="username" value="${jdbc.username}"/>
	    <property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <!-- 数据库连接池 -->
	    <property name="dataSource" ref="dataSource"/>
	    <!-- 加载Mybatis全局配置文件 -->
	    <property name="configLocation" value="classpath:SqlMapConfig.xml"/>
	</bean>
	
	<!-- 配置mapper扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <!-- 扫描包路径，如果需要扫描多个包中间用半角逗号隔开 -->
	    <property name="basePackage" value="com.kxy.demo.mapper"></property>
	    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<!-- 事务控制  对MyBatis操作数据库  spring使用JDBC事务控制类 -->

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <!-- 配置数据源 -->
	    <property name="dataSource" ref="dataSource"/>
	</bean>
    
    <!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            
            
        </tx:attributes>
    </tx:advice>
    
    <!-- 配置aop  -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.kxy.demo.service.*.*(..))"/>
    </aop:config>
    
    <!-- 配置JMS连接工厂 -->
    <!-- 使用JMS发送和接受消息，使用ActiveMQ作为代理，不论是点对点还是发布订阅都消息都想到代理 -->
    <!-- 默认情况下， ActiveMQConnectionFactory会假设 ActiveMQ监听localhost的61616端口, 可以用brokerURL设置代理的url-->
    <bean id="connectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
    	<property name="brokerURL" value="tcp://localhost:61616"></property>
    </bean>
    
    <!-- 设置消息的目的地，可以是点对点的队列，或者订阅/发布的主题 -->
    <!-- 队列是一对一的消息 ，消息通道的名称是 spitter.queue， 这个名字可以随便写-->
    <bean id="queue" class="org.apache.activemq.command.ActiveMQQueue">
    	<constructor-arg value="user.queue"></constructor-arg>
    </bean>
    
    <!-- 主题是一对多的消息，消息通道的名称是 spitter.topic -->
    <bean id="topic" class="org.apache.activemq.command.ActiveMQTopic">
    	<constructor-arg value="user.topic"></constructor-arg>
    </bean>
    
    <!-- jms模板，代替jms本身的不友好的代码 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
    	<constructor-arg ref="connectionFactory"></constructor-arg>
    	<!-- 自定默认的目的地，这样在 jmsOperations.send时，可以不用指定目的地 -->
		<property name="defaultDestinationName" value="user.queue"></property>
		<!-- 修改默认的转换器为json转换器 -->
		<!--<property name="messageConverter" ref="messageConvert"></property>  -->  
	</bean>
	
	<!-- jms, 使用json的消息转换器 -->
	<bean id="messageConvert" class="org.springframework.jms.support.converter.MappingJackson2MessageConverter"></bean>
</beans> 
